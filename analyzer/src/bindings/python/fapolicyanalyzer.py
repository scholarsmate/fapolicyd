# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_fapolicyanalyzer')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_fapolicyanalyzer')
    _fapolicyanalyzer = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fapolicyanalyzer', [dirname(__file__)])
        except ImportError:
            import _fapolicyanalyzer
            return _fapolicyanalyzer
        try:
            _mod = imp.load_module('_fapolicyanalyzer', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _fapolicyanalyzer = swig_import_helper()
    del swig_import_helper
else:
    import _fapolicyanalyzer
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

NOT_FOUND = _fapolicyanalyzer.NOT_FOUND
RANGE_ERROR = _fapolicyanalyzer.RANGE_ERROR
PARSE_ERROR = _fapolicyanalyzer.PARSE_ERROR
ALLOCATION_ERROR = _fapolicyanalyzer.ALLOCATION_ERROR
OK = _fapolicyanalyzer.OK

def match_filename(pattern, string):
    return _fapolicyanalyzer.match_filename(pattern, string)
match_filename = _fapolicyanalyzer.match_filename
SHA256_DIGEST_SIZE = _fapolicyanalyzer.SHA256_DIGEST_SIZE

def sha256_create():
    return _fapolicyanalyzer.sha256_create()
sha256_create = _fapolicyanalyzer.sha256_create

def sha256_destroy(ctx):
    return _fapolicyanalyzer.sha256_destroy(ctx)
sha256_destroy = _fapolicyanalyzer.sha256_destroy

def sha256_update(ctx, data, len):
    return _fapolicyanalyzer.sha256_update(ctx, data, len)
sha256_update = _fapolicyanalyzer.sha256_update

def sha256_final(ctx, digest):
    return _fapolicyanalyzer.sha256_final(ctx, digest)
sha256_final = _fapolicyanalyzer.sha256_final

def sha256_file(hash_buf, hash_buf_len, path):
    return _fapolicyanalyzer.sha256_file(hash_buf, hash_buf_len, path)
sha256_file = _fapolicyanalyzer.sha256_file

def package_get_rpm_info():
    return _fapolicyanalyzer.package_get_rpm_info()
package_get_rpm_info = _fapolicyanalyzer.package_get_rpm_info

def package_get_rpm_files_info(rpm_table_ptr, progress_callback, progress_client_ptr):
    return _fapolicyanalyzer.package_get_rpm_files_info(rpm_table_ptr, progress_callback, progress_client_ptr)
package_get_rpm_files_info = _fapolicyanalyzer.package_get_rpm_files_info

def package_hash_files(rpm_files_info_table_ptr, progress_callback, progress_client_ptr):
    return _fapolicyanalyzer.package_hash_files(rpm_files_info_table_ptr, progress_callback, progress_client_ptr)
package_hash_files = _fapolicyanalyzer.package_hash_files
class table_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, table_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, table_t, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fapolicyanalyzer.new_table_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fapolicyanalyzer.delete_table_t
    __del__ = lambda self: None

    def initialize(self, column_names):
        return _fapolicyanalyzer.table_t_initialize(self, column_names)

    def get_column_count(self):
        return _fapolicyanalyzer.table_t_get_column_count(self)

    def get_row_count(self):
        return _fapolicyanalyzer.table_t_get_row_count(self)

    def get_column_name(self, col_num):
        return _fapolicyanalyzer.table_t_get_column_name(self, col_num)

    def find_column_number(self, column_name):
        return _fapolicyanalyzer.table_t_find_column_number(self, column_name)

    def get_value(self, col_num, row_num):
        return _fapolicyanalyzer.table_t_get_value(self, col_num, row_num)

    def push_back_row(self, row_values):
        return _fapolicyanalyzer.table_t_push_back_row(self, row_values)

    def push_back_column(self, column_name, column_values):
        return _fapolicyanalyzer.table_t_push_back_column(self, column_name, column_values)
table_t_swigregister = _fapolicyanalyzer.table_t_swigregister
table_t_swigregister(table_t)

# This file is compatible with both classic and new-style classes.


